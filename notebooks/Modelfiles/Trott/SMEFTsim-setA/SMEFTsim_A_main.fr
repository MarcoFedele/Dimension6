(* ************************** *)
(* *****  Information   ***** *)
(* ************************** *)


M$ModelName = "SMEFTsim_A";

M$Information = {
  Authors -> {"I. Brivio, Y. Jiang, M. Trott"}, 
  Version -> "1.0",
  Date -> "20. 09. 2017",
  Institutions	-> {"NBIA and Discovery Center, Niels Bohr Institute, University of Copenhagen"},
  Emails -> {"ilaria.brivio@nbi.ku.dk", "yunjiang@nbi.ku.dk", "michael.trott@cern.ch"},
  References -> "arXiv:1709.06492",
  URLs -> "https://feynrules.irmp.ucl.ac.be/wiki/SMEFT"
};


FeynmanGauge = False;
FR$DSign = -1; 			(* the covariant derivatives are defined with the convention D = d + I A *)
IncludeSMloopHcouplings = True; (* set to False to remove the one loop SM Higgs couplings to gg, gamma-gamma, z-gamma *)



(* check if flavor and input schemes have been defined. If yes: print confirmation message. If not: print error message *)

flavor_error = "Flavor flag not defined or incorrectly assigned. Allowed values are general, U35, MFV";
scheme_error = "Scheme flag not defined or incorrectly assigned. Allowed values are alphaScheme, MwScheme";

Switch[Flavor,
general,  Print["Flavor general framework selected"],
U35,  Print["U(3)^5 symmetric framework selected"],
MFV,  Print["MFV framework selected"],
_,  Print[flavor_error]; 
];

Switch[Scheme,
alphaScheme,  Print["Input parameters: ", \[Alpha], ", ", Subscript[m,Z],", ", Subscript[G,f]],
MwScheme,  Print["Input parameters: ", Subscript[m,W], ", ", Subscript[m,Z],", ", Subscript[G,f]],
_,  Print[scheme_error];
];



(* ************************** *)
(* ***** NLO Variables ****** *)
(******************************)

FR$LoopSwitches = {{Gf, MW}};
FR$RmDblExt = { ymb -> MB, ymc -> MC, ymdo -> MD, yme -> Me, ymm -> MMU, yms -> MS, ymt -> MT, ymtau -> MTA, ymup -> MU};


(* ************************** *)
(* *****      vevs      ***** *)
(* ************************** *)

M$vevs = { {Phi[2],vevT} };


(* ************************** *)
(* *****  Gauge groups  ***** *)
(* ************************** *)

M$GaugeGroups = {
  U1Y  == { 
    Abelian          -> True,  
    CouplingConstant -> g1, 
    GaugeBoson       -> B, 
    Charge           -> Y
  },
  SU2L == { 
    Abelian           -> False, 
    CouplingConstant  -> gw, 
    GaugeBoson        -> Wi, 
    StructureConstant -> Eps, 
    Representations   -> {Ta,SU2D}, 
    Definitions       -> {Ta[a_,b_,c_]->PauliSigma[a,b,c]/2, FSU2L[i_,j_,k_]:> I Eps[i,j,k]}
  },
  SU3C == { 
    Abelian           -> False, 
    CouplingConstant  -> gs, 
    GaugeBoson        -> G,
    StructureConstant -> f, 
    Representations   -> {T,Colour}, 
    SymmetricTensor   -> dSUN
  } 
};


(* ************************** *)
(* *****    Indices     ***** *)
(* ************************** *)

IndexRange[Index[SU2W      ]] = Unfold[Range[3]]; 
IndexRange[Index[SU2D      ]] = Unfold[Range[2]];
IndexRange[Index[Gluon     ]] = NoUnfold[Range[8]];
IndexRange[Index[Colour    ]] = NoUnfold[Range[3]]; 
IndexRange[Index[Generation]] = Range[3];

IndexStyle[SU2W,       j];
IndexStyle[SU2D,       k];
IndexStyle[Gluon,      a];
IndexStyle[Colour,     m];
IndexStyle[Generation, f];


(* ************************** *)
(* *** Interaction orders *** *)
(* ***  (as used by mg5)  *** *)
(* ************************** *)

M$InteractionOrderHierarchy = {
  {QCD, 1}, {QED, 2}, {NP, 1}
};

(*
M$InteractionOrderLimit = { {NP,1} }; (* retain only linear order SMEFT interactions *)
*)


(* ******************* *)
(* **** Particles **** *)
(* ******************* *)

(* import field definitions (the definition of V[3] depends on Scheme) *)  

Get["SMEFTsim_A_fields.fr"];


(* ************************** *)
(* *****     Gauge      ***** *)
(* *****   Parameters   ***** *)
(* *****   (FeynArts)   ***** *)
(* ************************** *)

GaugeXi[ V[1]  ] = GaugeXi[A];
GaugeXi[ V[2]  ] = GaugeXi[Z];
GaugeXi[ V[3]  ] = GaugeXi[W];
GaugeXi[ V[4]  ] = GaugeXi[G];
GaugeXi[ S[1]  ] = 1;
GaugeXi[ S[2]  ] = GaugeXi[Z];
GaugeXi[ S[3]  ] = GaugeXi[W];
GaugeXi[ U[1]  ] = GaugeXi[A];
GaugeXi[ U[2]  ] = GaugeXi[Z];
GaugeXi[ U[31] ] = GaugeXi[W];
GaugeXi[ U[32] ] = GaugeXi[W];
GaugeXi[ U[4]  ] = GaugeXi[G];


(* ********************************************************** *)
(* *****   loop functions for SM loop Higgs couplings   ***** *)
(* ********************************************************** *)


Ifermion[x_,y_]:= 1/3 + (11 y)/90 + (22 y^2)/315 + (74 y^3)/1575 + (7 x)/90 + (16 y x)/315 + (58 y^2 x)/1575 + (2 x^2)/63 + (2 y x^2)/75 + (26 x^3)/1575;

Iw[x_]:= -(7/4) - (11 x)/30 - (19 x^2)/105 - (58 x^3)/525;

IwZ[x_,y_]:= ( 11/24 - (31 cth^2)/(24 sth^2) + (11 x)/180 - (11 cth^2 x)/(36 sth^2) + (19 x^2)/630 - (19 cth^2 x^2)/(126 sth^2) 
	     + (29 x^3)/1575 - (29 cth^2 x^3)/(315 sth^2) + (7 y)/45 - (4 cth^2 y)/(9 sth^2) + (2 x y)/35 - (62 cth^2 x y)/(315 sth^2) 
	     + (16 x^2 y)/525 - (4 cth^2 x^2 y)/(35 sth^2) + (53 y^2)/630 - (17 cth^2 y^2)/(70 sth^2) + (67 x y^2)/1575 
	     - (43 cth^2 x y^2)/(315 sth^2) + (86 y^3)/1575 - (10 cth^2 y^3)/(63 sth^2));
  

  
(* ************************** *)
(* *****   Parameters   ***** *)
(* ************************** *)  

 
Get["SMEFTsim_A_parameters.fr"];



(* ******************************************* *)
(* *****   redefinitions and rotations   ***** *)
(* ******************************************* *)

(* rotation to have canonical kinetic terms: replacement at the level of mass eigenstates to be done on the SM Lag. only *)

rotateGaugeB = {
G[mu_,a_]->G[mu,a](1 + cHG vevhat^2/LambdaSMEFT^2),
A[mu_] -> A[mu] (1 + vevhat^2/LambdaSMEFT^2 (cHB cth^2 + cHW sth^2 - cHWB sth cth))+ 
          Z[mu]( vevhat^2/LambdaSMEFT^2 (- cHB cth sth + cHW cth sth - 1/2 cHWB (1 - 2 sth^2)) - dsth2/(2 sth cth)),
Z[mu_] -> Z[mu] (1 + vevhat^2/LambdaSMEFT^2 (cHB sth^2 + cHW cth^2 + cHWB sth cth))+ 
          A[mu]( vevhat^2/LambdaSMEFT^2 (- cHB cth sth + cHW cth sth - 1/2 cHWB (1 - 2 sth^2)) + dsth2/(2 sth cth)),
W[mu_] -> W[mu] (1 + cHW vevhat^2/LambdaSMEFT^2), 
Wbar[mu_] -> Wbar[mu] (1 + cHW vevhat^2/LambdaSMEFT^2)
};


(* redefinition of the coupling constants and vev. To be applied to the SM Lag only. *)

redefConst = {
gs -> gs(1 - cHG vevhat^2/LambdaSMEFT^2),
gw -> gwsh,
g1 -> g1sh};

redefVev={vevT -> vevhat(1 + 1/Sqrt[2] dGf)};


(* ************************************************************************** *)
(* *****   expressions of the shifts in terms of Wilson coefficients.   ***** *)
(* ************************************************************************** *)
(* alphaShifts or MwShifts should be used with ReplaceRepeated in the Mathematica notebook*)

Switch[Flavor,
general,
  dGfWC = vevhat^2/LambdaSMEFT^2 ((cHl3[1,1]+cHl3[2,2])/Sqrt[2] - (cll[1,2,2,1])/(Sqrt[2]));
,U35 | MFV,
  dGfWC = vevhat^2/LambdaSMEFT^2 (cHl3 Sqrt[2] - (cll + cll1)/(2*Sqrt[2]));
];

Switch[Scheme,
alphaScheme,

  alphaShifts={
    dMZ2 -> MZ^2 vevhat^2 (cHD/2 + 2 cth sth cHWB)/LambdaSMEFT^2,
    dGf  -> dGfWC,
    dg1  -> sth^2/2/(1-2sth^2) (Sqrt[2] dGf + dMZ2/MZ^2 + 2 cth^2 cth/sth cHWB vevhat^2/LambdaSMEFT^2 ),
    dgw  -> - cth^2/2/(1-2sth^2) (Sqrt[2] dGf + dMZ2/MZ^2 + 2 sth^2 sth/cth cHWB vevhat^2/LambdaSMEFT^2 ),
    dsth2 -> 2 cth^2 sth^2 (dg1 - dgw) + cth sth (1-2 sth^2) cHWB vevhat^2/LambdaSMEFT^2,
    dMW2 -> 2 MW0 dMW,
    dMW  -> MW0( dGf/Sqrt[2] +  dgw ),
    dMH2 -> MH^2 (vevhat^2/LambdaSMEFT^2 (2 cHbox-cHD/2-3 cH/(2 lam)))
  };
    
,MwScheme,

  MwShifts={
    dMZ2 -> MZ^2 vevhat^2/LambdaSMEFT^2 (cHD/2 + 2 cth sth cHWB),
    dGf  -> dGfWC,
    dg1  -> - 1/2 (Sqrt[2] dGf + 1/sth^2 dMZ2/MZ^2),
    dgw  -> - 1/2 (Sqrt[2] dGf),
    dsth2 -> 2 cth^2 sth^2 (dg1 - dgw) - cth sth (1-2 sth^2) cHWB vevhat^2/LambdaSMEFT^2,
    dMH2 -> MH^2 (vevhat^2/LambdaSMEFT^2 (2 cHbox-cHD/2-3 cH/(2 lam)))
  };
];




(* ********************************** *)
(* *****   useful definitions   ***** *)
(* ********************************** *)

(* sigma_munu tensor *)

sigmaT[mu_,nu_,sp1_,sp2_]:= I/2 Module[{sp3}, Ga[mu,sp1,sp3].Ga[nu,sp3,sp2]-Ga[nu,sp1,sp3].Ga[mu,sp3,sp2]];

(* symmetric derivative  iH+(DH) - i(DH+)H  *)

HDH[mu_]:= Block[{ii,jj}, 
		feynmangaugerules = If[Not[FeynmanGauge], {G0|GP|GPbar ->0}, {}]; 
		ExpandIndices[I Phibar[ii] DC[Phi[ii],mu] - I DC[Phibar[jj],mu] Phi[jj], FlavorExpand->{SU2D,SU2W}]/.feynmangaugerules 
		];


		
(* ************************** *)
(* *****   Lagrangian   ***** *)
(* ************************** *)


LGauge := Block[{mu,nu,ii,aa}, 
  ExpandIndices[-1/4 FS[B,mu,nu] FS[B,mu,nu] - 1/4 FS[Wi,mu,nu,ii] FS[Wi,mu,nu,ii] - 1/4 FS[G,mu,nu,aa] FS[G,mu,nu,aa]/.redefConst, FlavorExpand->SU2W]/.rotateGaugeB]/.redefVev//OptimizeIndex//LinearWC;


LFermions := Block[{mu}, 
  ExpandIndices[I*(
    QLbar.Ga[mu].DC[QL, mu] + LLbar.Ga[mu].DC[LL, mu] + uRbar.Ga[mu].DC[uR, mu] + dRbar.Ga[mu].DC[dR, mu] + lRbar.Ga[mu].DC[lR, mu])/.redefConst, 
  FlavorExpand->{SU2W,SU2D}]/.{CKM[a_,b_] Conjugate[CKM[a_,c_]]->IndexDelta[b,c], CKM[b_,a_] Conjugate[CKM[c_,a_]]->IndexDelta[b,c]}/.rotateGaugeB]/.redefVev//LinearWC//OptimizeIndex;


LHiggs := Block[{ii,mu, feynmangaugerules},
  feynmangaugerules = If[Not[FeynmanGauge], {G0|GP|GPbar ->0}, {}];
 
  ExpandIndices[DC[Phibar[ii],mu] DC[Phi[ii],mu] - barlam( Phibar[ii] Phi[ii] - vev^2/2)^2/.redefConst, FlavorExpand->{SU2D,SU2W}]/.feynmangaugerules/.rotateGaugeB/.redefVev//LinearWC//OptimizeIndex
 ];


(** Higgs SM loop couplings **)

LSMloop := Block[{mu,nu,aa},
     H/vevhat( 
         gHgg (del[G[nu,aa],mu] - del[G[mu,aa], nu])^2 + (* simple derivative to avoid GGGh, GGGGh couplings *)
         gHaa FS[A,mu,nu]    FS[A,mu,nu]   +
         gHza FS[Z,mu,nu]    FS[A,mu,nu]   )
 ];


LYukawa0 := Block[{sp,ii,jj,cc,ff1,ff2,yuk,feynmangaugerules},
  feynmangaugerules = If[Not[FeynmanGauge], {G0|GP|GPbar ->0}, {}];
 
  yuk = ExpandIndices[
 
  -yd0[ff1, ff2] dRbar[sp, ff1, cc].QLm[sp, ii, ff2, cc] Phibar[ii] 
  -yl0[ff1, ff2] lRbar[sp, ff1].LL[sp, ii, ff2] Phibar[ii] 
  -yu0[ff1, ff2] uRbar[sp, ff1, cc].QL[sp, jj, ff2, cc] Phi[ii] Eps[jj, ii] 

, FlavorExpand -> {SU2D}];

  (* in the flavor general case apply the simplification at this point *)
  
 If[Flavor === general, 
  SimplifyYukawas[yuk+HC[yuk]/.feynmangaugerules/.redefConst/.redefVev],
  yuk+HC[yuk]/.feynmangaugerules/.redefConst/.redefVev
  ]
 ];

(* in the MFV case apply the simplification at the outer level. otherwise just linearize and optimize indices *)

Switch[Flavor,
  general | U35, LYukawa := OptimizeIndex[LinearWC[LYukawa0]],
  MFV, LYukawa := OptimizeIndex[SimplifyYukawas[LYukawa0]]
  ];

  
  
LGhost := Block[{LGh1,LGhw,LGhs,LGhphi,mu, generators,gh,ghbar,Vectorize,phi1,phi2,togoldstones,doublet,doublet0},
  (* Pure gauge piece *) 	
  LGh1 = -ghBbar.del[DC[ghB,mu],mu];
  LGhw = -ghWibar.del[DC[ghWi,mu],mu];
  LGhs = -ghGbar.del[DC[ghG,mu],mu];

  (* Scalar pieces: see Peskin pages 739-742 *)
  (* phi1 and phi2 are the real degrees of freedom of GP *)
  (* Vectorize transforms a doublet in a vector in the phi-basis, i.e. the basis of real degrees of freedom *)
  gh    = {ghB, ghWi[1], ghWi[2], ghWi[3]};
  ghbar = {ghBbar, ghWibar[1], ghWibar[2], ghWibar[3]};
  generators = {-I/2 g1 IdentityMatrix[2], -I/2 gw PauliSigma[1], -I/2 gw PauliSigma[2], -I/2 gw PauliSigma[3]};
  doublet = Expand[{(-I phi1 - phi2)/Sqrt[2], Phi[2]} /. MR$Definitions /. vevT-> 0]; 
  doublet0 = {0, vevT/Sqrt[2]};
  Vectorize[{a_, b_}]:= Simplify[{Sqrt[2] Re[Expand[a]], Sqrt[2] Im[Expand[a]], Sqrt[2] Re[Expand[b]], Sqrt[2] Im[Expand[b]]}/.{Im[_]->0, Re[num_]->num}];
  togoldstones := {phi1 -> (GP + GPbar)/Sqrt[2], phi2 -> (-GP + GPbar)/(I Sqrt[2])};
  LGhphi=Plus@@Flatten[Table[-ghbar[[kkk]].gh[[lll]] Vectorize[generators[[kkk]].doublet0].Vectorize[generators[[lll]].(doublet+doublet0)],{kkk,4},{lll,4}]] /.togoldstones;

ExpandIndices[ LGhs + If[FeynmanGauge, LGh1 + LGhw + LGhphi,0], FlavorExpand->SU2W]];



LSM0:= LGauge + LFermions + LHiggs + LYukawa + LGhost;

LSM := SMlimit[LSM0]; (* pure SM Lagrangian (without d=6) *)

LSMshifted := LinearWC[LSM0]; (* SM Lagrangian with shifts, linear in d=6 *)

LSMincl := LSMshifted + If[IncludeSMloopHcouplings, LSMloop, 0]  (* SM lagrangian shifted, with Higgs loop couplings *)



(* import dimension 6 operators from file *)


Switch[Flavor,
general,
    Get["SMEFTsim_A_operators_general.fr"];
,U35,
    Get["SMEFTsim_A_operators_U35.fr"];
,MFV,
    Get["SMEFTsim_A_operators_MFV.fr"];
,_, 
    Print[flavor_error];   
];


LSMEFT := LSMincl + L6;
